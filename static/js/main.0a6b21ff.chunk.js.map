{"version":3,"sources":["components/question/Question.js","components/answer/Answer.js","components/QuizMain.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","question","Answer","answer","Object","keys","map","qAnswer","i","className","correctAnswer","clickedAnswer","onClick","checkAnswer","key","disabled","Quiz","state","questions","1","2","3","answers","correctAnswers","step","score","setState","nextStep","this","length","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAWeA,G,YARE,SAACC,GACd,OACI,4BACKA,EAAMC,YCgCJC,G,MAnCA,SAACF,GAEb,IAAIG,EAASC,OAAOC,KAAKL,EAAMG,QAC9BG,KAAI,SAACC,EAASC,GAAV,OACJ,wBACAC,UACIT,EAAMU,gBAAkBH,EACxB,UACAP,EAAMW,gBAAkBJ,EACxB,YAAc,GAElBK,QAAW,kBAAMZ,EAAMa,YAAYN,IACnCO,IAAOP,GACFP,EAAMG,OAAOI,OAIlB,OACI,oCACA,wBAAIQ,WAAUf,EAAMW,cAA8BF,UAAY,WACzDN,GAGL,yBAAKM,UAAW,WAERT,EAAMU,cACN,8CACAV,EAAMW,cACN,gDAA2B,gCC1BtBK,E,4MAEjBC,MAAQ,CACJC,UAAY,CACRC,EAAG,kDACHC,EAAG,kBACHC,EAAG,qCAGPC,QAAS,CACLH,EAAG,CACCA,EAAG,kBACHC,EAAG,MACHC,EAAG,WAEPD,EAAG,CACCD,EAAG,yBACHC,EAAG,qBACHC,EAAG,wBAEPA,EAAG,CACCF,EAAG,WACHC,EAAG,YACHC,EAAG,UAGXE,eAAgB,CACZJ,EAAG,IACHC,EAAG,IACHC,EAAG,KAEPX,cAAe,EACfC,cAAe,EACfa,KAAM,EACNC,MAAO,G,EAIXZ,YAAc,SAAAV,GAAW,IAAD,EACoB,EAAKc,MAArCM,EADY,EACZA,eAAiBC,EADL,EACKA,KAAMC,EADX,EACWA,MAC5BtB,IAAWoB,EAAeC,GACzB,EAAKE,SAAS,CACVD,MAAOA,EAAQ,EACff,cAAea,EAAeC,GAC9Bb,cAAeR,IAGnB,EAAKuB,SAAS,CACVhB,cAAe,EACfC,cAAeR,K,EAK3BwB,SAAW,SAAAH,GACP,EAAKE,SAAS,CACVF,KAAMA,EAAO,EACbd,cAAe,EACfC,cAAe,K,uDAId,IAAD,SACoEiB,KAAKX,MAAvEC,EADF,EACEA,UAAWM,EADb,EACaA,KAAMF,EADnB,EACmBA,QAASZ,EAD5B,EAC4BA,cAAeC,EAD3C,EAC2CA,cAAec,EAD1D,EAC0DA,MAC9D,OACI,yBAAKhB,UAAU,WACde,GAAQpB,OAAOC,KAAKa,GAAWW,OAAU,oCAC1C,kBAAC,EAAD,CACI5B,SAAYiB,EAAUM,KAE1B,kBAAC,EAAD,CACIrB,OAAUmB,EAAQE,GAClBA,KAAQA,EACRX,YAAee,KAAKf,YACpBH,cAAiBA,EACjBC,cAAiBA,IAErB,4BACEF,UAAY,WACZM,WACIJ,GAAiBP,OAAOC,KAAKa,GAAWW,QAAUL,GAGtDZ,QAAW,kBAAM,EAAKe,SAASH,KANjC,SAUI,yBAAKf,UAAW,aACZ,uBAAGqB,GAAG,OAAN,qBACA,8CAAoBL,EAApB,WAAmCrB,OAAOC,KAAKa,GAAWW,c,GAzF5CE,a,MCOnBC,MARf,WACE,OACE,yBAAKvB,UAAU,OACZ,kBAAC,EAAD,QCKawB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0a6b21ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Question.css';\r\n\r\nconst Question = (props) => {\r\n    return(\r\n        <h1>\r\n            {props.question}\r\n        </h1>\r\n    );\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport './Answer.css';\r\n\r\nconst Answer = (props) => {\r\n\r\n   let answer = Object.keys(props.answer)\r\n   .map((qAnswer, i) => (\r\n    <li \r\n    className ={\r\n        props.correctAnswer === qAnswer ?\r\n        'correct' :\r\n        props.clickedAnswer === qAnswer ?\r\n        'incorrect' : ''\r\n    }\r\n    onClick = {() => props.checkAnswer(qAnswer)}\r\n    key = {qAnswer}>\r\n        {props.answer[qAnswer]}\r\n    </li>\r\n   ));\r\n\r\n    return(\r\n        <>\r\n        <ul disabled={props.clickedAnswer ? true : false} className = \"Answers\">\r\n            {answer}\r\n        </ul>\r\n\r\n        <div className= \"caption\">\r\n            {\r\n                props.correctAnswer ?\r\n                <p>Correct Answer!</p> :\r\n                props.clickedAnswer ?\r\n                <p>Incorrect Answer!</p> : <p></p>\r\n            }\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Answer;","import React, { Component } from 'react';\r\nimport './QuizMain.css';\r\nimport Question from './question/Question';\r\nimport Answer from './answer/Answer';\r\n\r\nexport default class Quiz extends Component {\r\n\r\n    state = {\r\n        questions : {\r\n            1: \"Which Indian state has a separate Constitution?\",\r\n            2: \"LED stands for?\",\r\n            3: \"What is the Capital of Karnataka?\"\r\n        },\r\n\r\n        answers: {\r\n            1: {\r\n                1: 'Jammu & Kashmir',\r\n                2: 'Goa',\r\n                3: 'Haryana'\r\n            },\r\n            2: {\r\n                1: 'Light Electronic Diode',\r\n                2: 'Low Emitting Diode',\r\n                3: 'Light Emitting Diode'\r\n            },\r\n            3: {\r\n                1: 'Itanagar',\r\n                2: 'Bangalore',\r\n                3: 'Delhi'\r\n            }\r\n        },\r\n        correctAnswers: {\r\n            1: '1',\r\n            2: '3',\r\n            3: '2'\r\n        },\r\n        correctAnswer: 0,\r\n        clickedAnswer: 0,\r\n        step: 1,\r\n        score: 0\r\n\r\n    }\r\n\r\n    checkAnswer = answer => {\r\n        const { correctAnswers,  step, score} = this.state;\r\n        if(answer === correctAnswers[step]){\r\n            this.setState({  //if the above expression is true, then set the state\r\n                score: score + 1,\r\n                correctAnswer: correctAnswers[step],\r\n                clickedAnswer: answer\r\n            });\r\n        }else{\r\n            this.setState({\r\n                correctAnswer: 0,\r\n                clickedAnswer: answer\r\n            });\r\n        }\r\n    }\r\n\r\n    nextStep = step => {\r\n        this.setState({\r\n            step: step + 1,\r\n            correctAnswer: 0,\r\n            clickedAnswer: 0\r\n        });\r\n    }\r\n\r\n    render(){\r\n        let { questions, step, answers, correctAnswer, clickedAnswer, score } = this.state;\r\n        return(\r\n            <div className=\"Content\">\r\n            {step <= Object.keys(questions).length ? (<>\r\n            <Question\r\n                question = {questions[step]}\r\n            />\r\n            <Answer\r\n                answer = {answers[step]}\r\n                step = {step}\r\n                checkAnswer = {this.checkAnswer}\r\n                correctAnswer = {correctAnswer}\r\n                clickedAnswer = {clickedAnswer}\r\n            />\r\n            <button\r\n              className = \"NextStep\"\r\n              disabled={\r\n                  clickedAnswer && Object.keys(questions).length >= step ?\r\n                  false : true\r\n              }\r\n              onClick = {() => this.nextStep(step)}\r\n            >Next</button>\r\n            </>\r\n            ) : (\r\n                <div className= \"finalPage\">\r\n                    <p id=\"res\">Your Quiz Result!</p>\r\n                    <p>Your score is : {score} out of {Object.keys(questions).length}</p>\r\n                    \r\n                </div>\r\n            )\r\n            }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport Quiz from './components/QuizMain';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Quiz/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}